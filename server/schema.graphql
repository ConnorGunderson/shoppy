### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneOrder(data: OrderCreateInput!): Order!
  createOneProduct(data: ProductCreateInput!): Product!
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Order {
  created: DateTime!
  email: String!
  id: String!
  items(after: OrderItemWhereUniqueInput, before: OrderItemWhereUniqueInput, first: Int, last: Int): [OrderItem!]!
  subtotal: Int!
  tax: Int!
  total: Int!
}

input OrderCreateInput {
  created: DateTime
  email: String!
  id: String
  items: OrderItemCreateNestedManyWithoutOrderInput
  subtotal: Int!
  tax: Int!
  total: Int!
}

input OrderCreateNestedOneWithoutItemsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutItemsInput
  create: OrderCreateWithoutItemsInput
}

input OrderCreateOrConnectWithoutItemsInput {
  create: OrderCreateWithoutItemsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutItemsInput {
  created: DateTime
  email: String!
  id: String
  subtotal: Int!
  tax: Int!
  total: Int!
}

type OrderItem {
  id: String!
  order: Order!
  price: Int!
  product: Product!
}

input OrderItemCreateNestedManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  connectOrCreate: [OrderItemCreateOrConnectWithoutOrderInput!]
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateNestedManyWithoutProductInput {
  connect: [OrderItemWhereUniqueInput!]
  connectOrCreate: [OrderItemCreateOrConnectWithoutProductInput!]
  create: [OrderItemCreateWithoutProductInput!]
}

input OrderItemCreateOrConnectWithoutOrderInput {
  create: OrderItemCreateWithoutOrderInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemCreateOrConnectWithoutProductInput {
  create: OrderItemCreateWithoutProductInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemCreateWithoutOrderInput {
  id: String
  itemCount: Int!
  price: Int!
  product: ProductCreateNestedOneWithoutOrderItemsInput!
}

input OrderItemCreateWithoutProductInput {
  id: String
  itemCount: Int!
  order: OrderCreateNestedOneWithoutItemsInput!
  price: Int!
}

input OrderItemListRelationFilter {
  every: OrderItemWhereInput
  none: OrderItemWhereInput
  some: OrderItemWhereInput
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  id: StringFilter
  itemCount: IntFilter
  order: OrderWhereInput
  orderId: StringFilter
  price: IntFilter
  product: ProductWhereInput
  productId: StringFilter
}

input OrderItemWhereUniqueInput {
  id: String
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  created: DateTimeFilter
  email: StringFilter
  id: StringFilter
  items: OrderItemListRelationFilter
  subtotal: IntFilter
  tax: IntFilter
  total: IntFilter
}

input OrderWhereUniqueInput {
  id: String
}

type Product {
  id: String!
  image: String!
  name: String!
  price: Int!
}

input ProductCreateInput {
  id: String
  image: String!
  likes: Int
  name: String!
  orderItems: OrderItemCreateNestedManyWithoutProductInput
  price: Int!
}

input ProductCreateNestedOneWithoutOrderItemsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutOrderItemsInput
  create: ProductCreateWithoutOrderItemsInput
}

input ProductCreateOrConnectWithoutOrderItemsInput {
  create: ProductCreateWithoutOrderItemsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutOrderItemsInput {
  id: String
  image: String!
  likes: Int
  name: String!
  price: Int!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  id: StringFilter
  image: StringFilter
  likes: IntFilter
  name: StringFilter
  orderItems: OrderItemListRelationFilter
  price: IntFilter
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  order(where: OrderWhereUniqueInput!): Order
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, where: OrderWhereInput): [Order!]!
  product(where: ProductWhereUniqueInput!): Product
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, where: ProductWhereInput): [Product!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
